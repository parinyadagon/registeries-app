// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  type          TYPE_USER @default(ORGANIZER)
  accounts      Account[]
  sessions      Session[]
  events        Event[]
  status        Status[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id           String   @id @default(cuid())
  name         String
  description  String   @db.Text
  limit_user   Int
  period_start DateTime
  period_end   DateTime
  status       e_status
  user_id      String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  image        String
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  status_event Status[]
}

enum e_status {
  DRAFT
  PUBLISHED
}

enum TYPE_USER {
  ORGANIZER
  USER
}

model Status {
  id          String     @id @default(cuid())
  user_id     String
  event_id    String
  join        JoinStatus
  code_verify String
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  user        User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  event       Event      @relation(fields: [event_id], references: [id], onDelete: Cascade)
}

enum JoinStatus {
  JOIN
  CANCEL
}
